# –ò–º–ø–æ—Ä—Ç Flask –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from flask import Flask, render_template, request
import numpy as np
import os
from werkzeug.utils import secure_filename

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö AI-–º–æ–¥—É–ª–µ–π (–≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ—Ç–¥–µ–ª—å–Ω–æ)
from ai_modules import (
    linear_regression, logistic_regression, decision_tree, random_forest,
    naive_bayes, knn, svm, gradient_boosting,
    kmeans, fp_growth, pca, object_detection
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.config["UPLOAD_FOLDER"] = "static/uploads"
os.makedirs(app.config["UPLOAD_FOLDER"], exist_ok=True)

# üìò –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —á–∞—Å–æ–≤
def suggest_schedule_day(hours):
    reading = round(hours * 0.4, 2)
    practice = round(hours * 0.4, 2)
    rest = round(hours * 0.2, 2)
    return f"üìò Suggested per day: Reading {reading}h, Practice {practice}h, Rest {rest}h"

# –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–∞–π—Ç–∞ ("/"), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∏ POST
@app.route("/", methods=["GET", "POST"])
def index():
    task_a_results = []        # –°—é–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 8 supervised –º–æ–¥–µ–ª–µ–π
    task_b_results = {}        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã 3 unsupervised –º–æ–¥–µ–ª–µ–π
    task_c_result = None       # –†–µ–∑—É–ª—å—Ç–∞—Ç Computer Vision
    image_path = None          # –ü—É—Ç—å –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    schedule_message = None    # –í—ã–≤–æ–¥–∏–º–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É (POST-–∑–∞–ø—Ä–æ—Å)
    if request.method == "POST":
        run_mode = request.form.get("run_mode")  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞

        # === –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ===
        if run_mode == "schedule_only":
            hours = float(request.form["hours"])
            schedule_message = suggest_schedule_day(hours)

        # === –†–µ–∂–∏–º: –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ AI –∞–ª–≥–æ—Ä–∏—Ç–º—ã ===
        elif run_mode == "run_all":
            hours = float(request.form["hours"])
            days = int(request.form["days"])

            # üìö –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞ (6 —Å—Ç—Ä–æ–∫, 2 –ø—Ä–∏–∑–Ω–∞–∫–∞) ‚Äî –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
            X_train = np.array([
                [1, 2],
                [2, 1],
                [3, 5],
                [4, 4],
                [2, 3],
                [3, 2]
            ])
            y_train = np.array([
                "Reading",
                "Practice",
                "Rest",
                "Reading",
                "Practice",
                "Rest"
            ])

            # üéØ –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ (3 —Å—Ç—Ä–æ–∫–∏) ‚Äî –¥–ª—è —á–µ—Å—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ accuracy
            X_test = np.array([
                [1, 2],
                [3, 5],
                [2, 1]
            ])
            y_test = np.array([
                "Reading",
                "Rest",
                "Practice"
            ])

            # ‚úÖ Task A: Supervised Learning (8 –º–æ–¥–µ–ª–µ–π)
            task_a_results = [
                ("Linear Regression", *linear_regression.run(X_train, y_train, X_test, y_test)),
                ("Logistic Regression", *logistic_regression.run(X_train, y_train, X_test, y_test)),
                ("Decision Tree", *decision_tree.run(X_train, y_train, X_test, y_test)),
                ("Random Forest", *random_forest.run(X_train, y_train, X_test, y_test)),
                ("Naive Bayes", *naive_bayes.run(X_train, y_train, X_test, y_test)),
                ("KNN", *knn.run(X_train, y_train, X_test, y_test)),
                ("SVM", *svm.run(X_train, y_train, X_test, y_test)),
                ("Gradient Boosting", *gradient_boosting.run(X_train, y_train, X_test, y_test))
            ]

            # üß™ Task B: Unsupervised Learning
            task_b_results["KMeans"] = kmeans.run(X_train)
            task_b_results["FP-Growth"] = fp_growth.run([
                ["Reading", "Practice"],
                ["Rest"],
                ["Reading", "Rest"]
            ])
            task_b_results["PCA"] = pca.run(X_train)

            # üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule_message = suggest_schedule_day(hours)

        # === –†–µ–∂–∏–º: –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ ===
        elif run_mode == "run_cv":
            image = request.files.get("image_file")
            if image:
                filename = secure_filename(image.filename)
                saved_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)
                image.save(saved_path)
                task_c_result = object_detection.run(saved_path)
                image_path = f"/static/uploads/{filename}"

    # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —à–∞–±–ª–æ–Ω index.html
    return render_template("index.html",
                           task_a_results=task_a_results,
                           task_b_results=task_b_results,
                           task_c_result=task_c_result,
                           image_path=image_path,
                           schedule_message=schedule_message)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(debug=True)
